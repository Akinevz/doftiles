filetype plugin on
" PLUGINS {{{
	" enable plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
	" }}}
call plug#begin('~/.vim/bundle')
	" tabline + sessions {{{
"Plug 'ap/vim-buftabline'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#ale#enabled = 1
	" }}}
	" easyalign {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
	" }}}
	" (un)comment {{{
	" }}}
	" unix stuff {{{
	" }}}
	" surround {{{
	" }}}
	" repeat {{{
	" }}}
	" quick-scope highlight {{{
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
	" }}}
	" limelight/goyo + tpope(git/unimp) {{{
	" }}}
	" ALE {{{
let g:ale_completion_enabled = 1
let g:ale_close_preview_on_insert = 1
let g:ale_cursor_detail = 1
let g:ale_completion_enabled = 1
let g:ale_set_balloons = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_list_window_size = 5
let g:ale_fixers = {
			\ 'javascript': ['prettier'],
			\ 'typescript': ['prettier'],
			\ 'css':		['prettier'],
			\}
"set omnifunc=ale#completion#OmniFunc
	" }}}
	" Syntastic {{{
"Plug 'vim-syntastic/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
	" }}}
	" LSP + Complete {{{
let g:lsp_signs_error = {'text': 'âœ—'}
	" }}}
	" typescript syntax {{{
" rest in ~/.vim/ftplugin/typescript.vim
	" }}}
	" latex + pandoc {{{
	" }}}
Plug 'HerringtonDarkholme/yats.vim'
Plug 'aserebryakov/vim-todo-lists'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/vim-easy-align'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'unblevable/quick-scope'
Plug 'vim-airline/vim-airline'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
call plug#end()
" }}}

"--KEYBINDS--" {{{
let mapleader="`"

imap <Leader>wq <Esc>
nmap <Leader>wq :up<CR>
nmap <Leader>qq :wq
imap <Leader>v	<C-o>""yiw:vimgrep /<C-r>""/ %<CR><ESC>
nmap <Leader>v	""yaw:vimgrep /<C-r>""/ %<CR>
nmap <Leader>cn	:cn<CR>:copen<CR>:vimgrep /

" autocompletes {{{
"inoremap <expr> <NUL> InsertTabWrapper()
inoremap <expr> <tab> InsertTabWrapper()
inoremap <expr> <NUL> InsertModeCorrect()
nnoremap <expr> <NUL> NormalModeCorrect()
nnoremap <Leader><NUL> egea<C-x><C-s>
inoremap <expr> <S-Tab> pumvisible() ? "<C-p>" : "<C-d>"
" }}}
" find brace
map [[ ?{<CR>w99[{
map ]] /}<CR>b99]}
map ][ j0[[%/{<CR>
map [] k$][%?}<CR>
" find word
nnoremap <Leader># *NN
nnoremap <Leader>gp *#
xnoremap <Leader>gp *#
onoremap <Leader>gp *#
nnoremap <Leader>gn #*
xnoremap <Leader>gn #*
onoremap <Leader>gn #*
" macro repeat
nnoremap Q @@
" focus manipulation
nnoremap <C-w><C-o> 99<C-w>+99<C-w>>
nnoremap <C-w><C-o><C-w> <C-w><C-w>99<C-w>+99<C-w>>
" edit mode jumps
inoremap <C-B> <C-o>guB<Esc>E<Space>
inoremap <C-F> <C-o>e<C-o>a
" spell toggles
nnoremap <leader>s :setlocal complete^=kspell<CR>
nnoremap <leader>S :setlocal spell<CR>
nnoremap <leader><leader>S :setlocal invspell<CR>
" }}}
set completeopt+=preview
" colorscheme {{{
colorscheme ron

if has("gui_running")
	set guifont=Fira\ Code\ weight=453\ 16
	colorscheme torte
endif
" }}}
" spelling {{{
set spellsuggest=5
set complete+=t
set spelllang=en_gb
" }}}
" editor setup {{{
set number
set relativenumber
set mouse=a
set esckeys
set lazyredraw
set splitright
set splitbelow
set modifiable
set swapfile
set undofile
set clipboard^=unnamedplus
"set directory=.cache/vim-swaps
set autoindent
set hidden
set bs=indent,eol,start
set diffopt+=hiddenoff
set diffopt+=indent-heuristic
set diffopt+=iwhiteall
set diffopt+=algorithm:patience
" }}}
" tabs {{{
set tabstop=4
set softtabstop=0
set shiftwidth=4
set noexpandtab
" }}}
" search {{{
set smartcase
set ignorecase
set incsearch
set scrolloff=5
" }}}
" status {{{
set viminfo=%,'100,<50,s10,h,n~/.vim/viminfo
set wildmenu
set laststatus=2
set showcmd
set showmatch
"set showmode
set linebreak
" }}}

" autocompletion keybind {{{
inoremap <S-Tab> <C-d>
" }}} 
" sudowrite {{{
cmap W! w ! sudo tee > /dev/null '%' 
" }}}
" Reload settings {{{
nmap <s-Z><s-S> :so $MYVIMRC<cr>
" }}}
" movement {{{
map <ESC>[5D <C-Left>
map <ESC>[5C <C-Right>
map! <ESC>[5D <C-Left>
map! <ESC>[5C <C-Right>
" }}}
" tabbing manipulation {{{
nnoremap <C-W><C-P> :bprev<CR>
nnoremap <C-W><C-N> :bnext<CR>
nnoremap <C-W><C-D> :bp <bar> :bd #<CR>
nnoremap <C-W><C-L> :ls<CR>
" }}}

" latex {{{
let g:tex_flavor='pdflatex'
" }}}
" Plugin Paths {{{
	"set runtimepath+=$HOME/.vim/vim-buftabline
	"set runtimepath+=$HOME/.vim/bundle/vim-easy-align-master
" }}}
" Sessions {{{
let g:session_autosave = 'no'
let g:session_autoload = 'no'
nmap 	<s-Z><s-C>	:up<bar>:SaveSession<bar>:CloseSession<cr>
nmap 	<s-Z><s-X>	:SaveSession 
nmap 	<s-Z><s-O>	:OpenSession 
" }}}

" autocomplete funcs {{{
" insert-ctrl-space {{{
function! InsertModeCorrect()
    let col = col('.') - 1
	if !&l:spell
		return "\<c-n>"
	endif
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<c-o>\<c-x>\<c-l>"
        " return "\<tab>"
    else
        "return "\<c-x>s"
        return pumvisible() ? "\<c-p>" : "\<Esc>bea\<c-x>s "
    endif
endfunction
" }}}
" normal-ctrl-space {{{
function! NormalModeCorrect()
    let col = col('.') - 1
	if !&l:spell
		return "geea\<c-n>"
		"return "\<c-x>\<c-l>"
	endif
    if !col
        return "A\<c-x>\<c-l>"
    else
        return "geea\<c-x>s"
        " return "bea\<c-x>s\<c-e>"
    endif
endfunction
" }}}
" insert-tab {{{
function! InsertTabWrapper()
    let col = col('.') - 1
	if !&l:spell
		return "\<tab>"
	endif
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
    endif
endfunction
" }}}
" }}}
" vim:foldmethod=marker:foldlevel=0
